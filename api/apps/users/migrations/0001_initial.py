# Generated by Django 2.2.7 on 2024-09-23 10:25

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=30, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("avatar", models.CharField(blank=True, max_length=1000, null=True)),
                ("avatar_thumb", models.CharField(blank=True, max_length=1000, null=True)),
                ("phone", models.CharField(blank=True, default="", max_length=30)),
                ("bio", models.CharField(blank=True, default="", max_length=1000)),
                ("display_name", models.CharField(blank=True, default="", max_length=100)),
                ("campaign_name", models.CharField(blank=True, default="", max_length=100)),
                ("dashboard_data_uri", models.CharField(blank=True, default="", max_length=100)),
                ("enabled_2fa", models.BooleanField(default=False)),
                ("profile_complete", models.BooleanField(default=False)),
                ("position_value_mapping", models.CharField(blank=True, default="", max_length=100)),
                ("government_level_title", models.CharField(blank=True, default="", max_length=100)),
                ("race_title", models.CharField(blank=True, default="", max_length=100)),
                ("is_demo_account", models.BooleanField(default=False)),
                ("is_have_subscription", models.BooleanField(default=False)),
                ("race_jurisdiction_request", models.CharField(blank=True, max_length=1000, null=True)),
                ("is_demo_account_ready", models.BooleanField(default=False)),
                ("is_admin_approved", models.BooleanField(default=False)),
                ("is_show_create_blockwalk_popup", models.BooleanField(default=False)),
                ("is_send_mail_approve_demo_account", models.BooleanField(default=False)),
                ("is_approve_to_export_data", models.BooleanField(default=False)),
                ("email_verified", models.BooleanField(default=False)),
                ("is_have_contact_support_status", models.BooleanField(default=False)),
                ("metadata", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("candidate_code", models.CharField(blank=True, max_length=255, null=True)),
                ("hours_available_per_week", models.IntegerField(blank=True, default=0, null=True)),
                ("previous_position_id", models.IntegerField(blank=True, null=True)),
                ("is_position_data_have_more_one_county", models.BooleanField(default=False)),
                (
                    "role",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Campaign Manager", "Campaign Manager"),
                            ("BlockWalker", "BlockWalker"),
                            ("Candidate", "Candidate"),
                        ],
                        default="Candidate",
                        max_length=30,
                        null=True,
                    ),
                ),
                ("campaign_id", models.CharField(blank=True, default="", max_length=10)),
                ("notification", models.BooleanField(default=True)),
                ("managed_by", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                (
                    "current_team",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="GovernmentLevel",
            fields=[
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("title", models.CharField(blank=True, max_length=100)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ResetPasswordOTP",
            fields=[
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("otp", models.CharField(blank=True, max_length=6, null=True)),
                ("is_verified", models.BooleanField(default=False)),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                "verbose_name": "Reset Password OTP",
                "verbose_name_plural": "Reset Password OTPs",
            },
        ),
        migrations.CreateModel(
            name="Race",
            fields=[
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("title", models.CharField(blank=True, max_length=100)),
                (
                    "government_level",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="users.GovernmentLevel"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CampaignInvite",
            fields=[
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Accept", "Accept"),
                            ("Decline", "Decline"),
                            ("Pending", "Pending"),
                            ("Expired", "Expired"),
                        ],
                        default="Pending",
                        max_length=50,
                    ),
                ),
                ("to_email", models.CharField(blank=True, default="", max_length=50)),
                ("first_name", models.CharField(blank=True, default="", max_length=50)),
                ("last_name", models.CharField(blank=True, default="", max_length=50)),
                (
                    "role",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Campaign Manager", "Campaign Manager"),
                            ("BlockWalker", "BlockWalker"),
                            ("Candidate", "Candidate"),
                        ],
                        default="Candidate",
                        max_length=30,
                        null=True,
                    ),
                ),
                ("is_expired", models.BooleanField(default=False)),
                ("code", models.CharField(blank=True, max_length=255, null=True)),
                ("read", models.BooleanField(default=False)),
                (
                    "actor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="actor_campaign_invite",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "candidate",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="owner_campaign",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "to_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="receiver_campaign_invite",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created"],
            },
        ),
        migrations.AddField(
            model_name="user",
            name="government_level",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="users.GovernmentLevel"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="race",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="users.Race"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.CreateModel(
            name="BlockWalker",
            fields=[],
            options={
                "verbose_name_plural": "Blockwalkers",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("users.user",),
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="CampaignManager",
            fields=[],
            options={
                "verbose_name_plural": "Campaign Managers",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("users.user",),
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Candidate",
            fields=[],
            options={
                "verbose_name_plural": "Candidates",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("users.user",),
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddIndex(
            model_name="resetpasswordotp",
            index=models.Index(fields=["user"], name="users_reset_user_id_354073_idx"),
        ),
        migrations.AddIndex(
            model_name="resetpasswordotp",
            index=models.Index(fields=["user", "is_verified"], name="users_reset_user_id_7fdbcd_idx"),
        ),
    ]
