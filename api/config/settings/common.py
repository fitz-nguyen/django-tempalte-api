"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 2.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import os
import re
import uuid
from datetime import timedelta
from glob import glob
from typing import Dict

import environ  # noqa
import sentry_sdk
from django.utils.translation import gettext_lazy as _
from firebase_admin import credentials, initialize_app
from rest_framework import status
from sentry_sdk.integrations.celery import CeleryIntegration
from sentry_sdk.integrations.django import DjangoIntegration

from .logging import LOGGING  # noqa
from .storage import *  # noqa
from .swagger import SWAGGER_SETTINGS  # noqa

#
env = environ.Env()
env.read_env()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
ROOT_DIR = environ.Path(__file__) - 3

BASE_URL = env("BASE_URL", default="http://localhost")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env(
    "DJANGO_SECRET_KEY",
    default="6n&fz#k_vf1bnmmb0h9u91gvr0+5mw9#$$b_a-@zcwr7vx)636",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ENVIRONMENT = env.str("ENVIRONMENT", default="production")
APP_NAME = env.str("APP_NAME", default="my-app")

ALLOWED_HOSTS = env("DJANGO_ALLOWED_HOSTS", default=["*"])

GDAL_SRC = env.str("GDAL_SRC", default="/usr/lib/libgdal.so.*")
if len(glob(GDAL_SRC)) > 0:
    GDAL_LIBRARY_PATH = glob(GDAL_SRC)[0]

GEOS_SRC = env.str("GEOS_SRC", default="/usr/lib/libgeos_c.so.*")
if len(glob(GEOS_SRC)) > 0:
    GEOS_LIBRARY_PATH = glob(GDAL_SRC)[0]

# Application definition

DJANGO_APPS = (
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.gis",
)

THIRD_PARTY_APPS = (
    "rest_framework",
    # Auth
    "rest_framework.authtoken",
    "oauth2_provider",
    "dj_rest_auth",
    # Registration
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "dj_rest_auth.registration",
    # CORS
    "corsheaders",
    # Swagger
    "drf_yasg",
    # Celery
    "django_celery_beat",
    "django_celery_results",
    # user-agent
    "django_user_agents",
    "fcm_django",
    # health_check
    "health_check",  # required
    "health_check.db",  # stock Django health checkers
    "health_check.cache",
    # 'health_check.storage',
    # 'health_check.contrib.migrations',
    # 'health_check.contrib.celery',  # this one is replace with custom celery check
    "health_check.contrib.celery_ping",  # requires celery
    # "health_check.contrib.s3boto3_storage",  # requires boto3 and S3BotoStorage backend
    # 'health_check.contrib.redis',
    # thumbnail
    "sorl.thumbnail",
    "tinymce",
    "s3direct",
    "admin_cursor_paginator",
    "admin_reorder",
    "rangefilter",
)
if os.name == "nt":

    OSGEO4W = r"C:\OSGeo4W"
    assert os.path.isdir(OSGEO4W), "Directory does not exist: " + OSGEO4W
    os.environ["OSGEO4W_ROOT"] = OSGEO4W
    os.environ["GDAL_DATA"] = OSGEO4W + r"\share\gdal"
    os.environ["PROJ_LIB"] = OSGEO4W + r"\share\proj"
    os.environ["PATH"] = OSGEO4W + r"\bin;" + os.environ["PATH"]

# Apps specific for this project go here.
LOCAL_APPS = (
    "apps.core.apps.CoreConfig",
    "apps.users.apps.UserConfig",
    "apps.devices.apps.DevicesConfig",
    "apps.users_auth.apps.UsersAuthConfig",
    "apps.startup.apps.StartupConfig",
    "apps.uploads.apps.UploadsConfig",
    "apps.systems.apps.SystemsConfig",
    "apps.notification.apps.NotificationConfig",
)

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS
CSRF_TRUSTED_ORIGINS = env.list("CSRF_TRUSTED_ORIGINS", default=["http://*", "https://*"])
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "oauth2_provider.middleware.OAuth2TokenMiddleware",
    "django_user_agents.middleware.UserAgentMiddleware",
    "apps.core.context.AppContextMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "apps.devices.middleware.DeviceIDLoggerMiddleware",
    # "admin_reorder.middleware.ModelAdminReorder",
]
TINYMCE_DEFAULT_CONFIG = {
    "height": "320px",
    "width": "960px",
    "menubar": False,
    "plugins": "advlist autolink lists link image charmap print preview anchor searchreplace visualblocks code "
    "fullscreen insertdatetime media table paste code help wordcount spellchecker",
    "toolbar": "undo redo | bold italic underline strikethrough |forecolor |"
    "backcolor casechange permanentpen formatpainter removeformat | fontselect fontsizeselect formatselect | alignleft "
    "aligncenter alignright alignjustify | outdent indent |  numlist bullist checklist | "
    " pagebreak | charmap emoticons | "
    "fullscreen  preview save print | insertfile image media pageembed template link anchor codesample | "
    "a11ycheck ltr rtl | showcomments addcomment code",
    "custom_undo_redo_levels": 10,
}

FRONTEND_BASE_URL = env("FRONTEND_BASE_URL", default="http://localhost")

# Registration
SITE_ID = 1
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD_EMAIL = "email"
ACCOUNT_AUTHENTICATION_METHOD_USERNAME = "email"
ACCOUNT_EMAIL_VERIFICATION_MANDATORY = "mandatory"

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# Mailer
SENDGRID_API_KEY = env("SENDGRID_API_KEY", default="")
ACCOUNT_EMAIL_VERIFICATION = env("ACCOUNT_EMAIL_VERIFICATION", default="none")
EMAIL_BACKEND = env(
    "DJANGO_EMAIL_BACKEND",
    default="django.core.mail.backends.smtp.EmailBackend",
)
EMAIL_HOST = env("EMAIL_HOST", default="smtp.gmail.com")
EMAIL_HOST_USER = env("EMAIL_HOST_USER", default="")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", default="")
EMAIL_PORT = env.int("EMAIL_PORT", default=587)
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=True)
DEFAULT_FROM_EMAIL = env("DJANGO_DEFAULT_FROM_EMAIL", default="")
ACCOUNT_EMAIL_SUBJECT_PREFIX = env("ACCOUNT_EMAIL_SUBJECT_PREFIX", default="")
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = env.int("EMAIL_CONFIRMATION_EXPIRE_DAYS", default=3)
# The number of seconds a password reset link is valid for
PASSWORD_RESET_TIMEOUT = env.int("PASSWORD_RESET_TIMEOUT", default=3600)

AUTHENTICATION_BACKENDS = (
    "oauth2_provider.backends.OAuth2Backend",
    # Uncomment following if you want to access the admin
    "django.contrib.auth.backends.ModelBackend",
)

# Auth model
AUTH_USER_MODEL = "users.User"

# Route
ROOT_URLCONF = "config.urls"

# Template
TEMPLATES_ROOT = str(ROOT_DIR("templates"))
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [TEMPLATES_ROOT],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    "default": env.db("DATABASE_URL", default="postgres://goldfish@postgres:12345/goldfish"),
    "replica1": env.db("DATABASE_REPLICA1_URL", default="postgres://goldfish@postgres:12345/goldfish"),
}
DATABASES["default"]["ATOMIC_REQUESTS"] = True
DATABASES["default"]["ENGINE"] = "django.contrib.gis.db.backends.postgis"

DATABASES["replica1"]["ATOMIC_REQUESTS"] = True
DATABASES["replica1"]["ENGINE"] = "django.contrib.gis.db.backends.postgis"

USE_PGBOUNCER = env.bool("USE_PGBOUNCER", default=False)
if USE_PGBOUNCER:
    DATABASES["default"]["HOST"] = env.str("PGBOUNCER_HOST", default="localhost")
    DATABASES["default"]["PORT"] = env.int("PGBOUNCER_POST", default=6432)

DATABASE_ROUTERS = ["apps.core.db.PrimaryReplicaRouter"]

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/
LANGUAGES = (("en-us", _("English")),)

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Locale paths
LOCALE_PATHS = (os.path.join(ROOT_DIR, "locale"),)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

# STATIC FILE CONFIGURATION
# ------------------------------------------------------------------------------
# See: https://docs.djangoproject.com/en/dev/ref/settings/#static-root
STATIC_ROOT = env.str("STATIC_ROOT", default=str(ROOT_DIR("staticfiles")))

# See: https://docs.djangoproject.com/en/dev/ref/settings/#static-url
STATIC_URL = env("STATIC_URL", default="/static/")

# Media
MEDIA_ROOT = env.str("MEDIA_ROOT", default=str(ROOT_DIR("media")))
MEDIA_URL = env("MEDIA_URL", default="/media/")
# Upload file permission
FILE_UPLOAD_PERMISSIONS = 0o644

REST_FRAMEWORK = {
    "COERCE_DECIMAL_TO_STRING": False,
    "DEFAULT_AUTHENTICATION_CLASSES": (
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.TokenAuthentication',
        "apps.users_auth.authentication.CustomJWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',  # LimitOffsetPagination
    "DEFAULT_PAGINATION_CLASS": "apps.core.pagination.StandardResultsSetPagination",  # LimitOffsetPagination
    "PAGE_SIZE": env.int("PAGE_SIZE", 20),
    "PAGINATE_BY_PARAM": "page_size",  # Allow client to override, using `?page_size=xxx`.
    "MAX_PAGINATE_BY": 500,  # Maximum limit allowed when using `?page_size=xxx`.
    # 'DATE_INPUT_FORMATS': ['YYYY-MM-DD HH:MM:SS'],
    "EXCEPTION_HANDLER": "apps.core.exception_handler.api_exception_handler",
}

# Rest Auth - Change password


REST_AUTH = {
    "PASSWORD_RESET_SERIALIZER": "apps.users.api.serializers.UserPasswordResetSerializer",
    "LOGIN_SERIALIZER": "apps.users.api.serializers.UserLoginSerializer",
    "PASSWORD_CHANGE_SERIALIZER": "apps.users.api.serializers.UserPasswordChangeSerializer",
    "PASSWORD_RESET_CONFIRM_SERIALIZER": "apps.users.api.serializers.UserPasswordResetConfirmSerializer",
    "REGISTER_SERIALIZER": "apps.users.api.serializers.UserRegisterSerializer",
    "OLD_PASSWORD_FIELD_ENABLED": True,
}

# whether or not cookies will be allowed to be included in cross-site HTTP requests
CORS_ALLOW_CREDENTIALS = True

# Allow CORS requests from all domain
# Should use CORS_ALLOWED_ORIGINS to whitelist domain instead
CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_HEADERS = (
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "device-id",
    "client-id",
    "app-version",
    "api-key",
    "application",
    "api-version",
)

SOCIALACCOUNT_CALLBACK_URL = env("SOCIALACCOUNT_CALLBACK_URL", default="http://localhost")

ACCOUNT_ADAPTER = "apps.users_auth.adapter.AccountAdapter"

#  Celery
BROKER_URL = env("CELERY_BROKER_URL", default="redis://redis:6379/0")
CELERYD_MAX_TASKS_PER_CHILD = 100
CELERYD_TASK_SOFT_TIME_LIMIT = 2400  # 40 minutes
CELERY_RESULT_BACKEND = "django-db"
CELERY_IGNORE_RESULT = False
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_EXTENDED = True

# File url from cloud
FILE_URL_FROM_CLOUD = env.bool("FILE_URL_FROM_CLOUD", default=False)

# phonenumbers
VALIDATE_PHONE_NUMBER = env.bool("VALIDATE_PHONE_NUMBER", default=False)

# AUTH settings
PASSWORD_MIN_LENGTH = 8

# Reset Password OTP expire time (second). Default is 30 minutes
RESET_PASSWORD_OTP_EXPIRE_TIME = 1800
TESTING_RESET_PASSWORD_OTP = 123456
USE_FCM = env.bool("USE_FCM", default=False)
# https://github.com/xtrinch/fcm-django
if USE_FCM:
    GOOGLE_APPLICATION_CREDENTIALS_PATH = env("GOOGLE_APPLICATION_CREDENTIALS_PATH", default="google-services.json")
    cred = credentials.Certificate(GOOGLE_APPLICATION_CREDENTIALS_PATH)
    initialize_app(credential=cred)
FCM_DJANGO_SETTINGS = {
    "APP_VERBOSE_NAME": APP_NAME,
    "FCM_SERVER_KEY": env("FCM_SERVER_KEY", default=""),
    "ONE_DEVICE_PER_USER": False,
    "DELETE_INACTIVE_DEVICES": True,
}


APP_UPLOADS = {
    "UPLOAD_CLASS": "apps.uploads.services.storage.aws.AWSStorage",
}
# Socket IO Emitter
REDIS_CONN_URL = env.str("REDIS_CONN_URL", default="redis://localhost:6379")
SOCKET_IO_EMITTER_KEY = env.str("SOCKET_IO_EMITTER_KEY", default="SOCKET_IO_EMITTER_KEY")
BROADCAST_CHANNEL = env.str("BROADCAST_CHANNEL", "BROADCAST_CHANNEL")

# Simple JWT
EXPIRED_TOKEN_MINUTES = env.int("EXPIRED_TOKEN_MINUTES", default=1440)
EXPIRED_REFRESH_DAYS = env.int("EXPIRED_REFRESH_DAYS", default=30)

# JWT PUBLIC/PRIVATE KEY PATH
JWT_PUBLIC_KEY_PATH = env.str("JWT_PUBLIC_KEY_PATH", default="jwt_api_key.pub")
JWT_PRIVATE_KEY_PATH = env.str("JWT_PRIVATE_KEY_PATH", default="jwt_api_key")

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=EXPIRED_TOKEN_MINUTES),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=EXPIRED_REFRESH_DAYS),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "RS256",
    "SIGNING_KEY": open(JWT_PRIVATE_KEY_PATH).read(),
    "VERIFYING_KEY": open(JWT_PUBLIC_KEY_PATH).read(),
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}

if "BUGSNAG_KEY" in os.environ:
    MIDDLEWARE.insert(0, "bugsnag.django.middleware.BugsnagMiddleware")
    BUGSNAG = {"api_key": env.str("BUGSNAG_KEY")}

TRACES_SAMPLER_TRANSACTION_INCLUDE_URLS = env.list(
    "TRACES_SAMPLER_TRANSACTION_INCLUDE_URLS",
    default=[
        "/v1/dashboard/update-selected/",
        "/v1/dashboard/query-chart/",
        "/v1/dashboard/import-contact-support-status/",
    ],
)

TRACES_SAMPLER_TRANSACTION_NAMES = env.list(
    "TRACES_SAMPLER_TRANSACTION_NAMES",
    default=[
        "generic WSGI request",
    ],
)


def sentry_traces_sampler(ctx):
    # if "wsgi_environ" in ctx:
    #     # Get the URL for WSGI requests
    #     url = ctx["wsgi_environ"].get("PATH_INFO", "")
    #     if url and url not in TRACES_SAMPLER_TRANSACTION_INCLUDE_URLS:
    #         return 0
    # transaction_name = ctx["transaction_context"]["name"]
    # if transaction_name not in TRACES_SAMPLER_TRANSACTION_NAMES:
    #     return 0
    return env.int("SENTRY_TRACES_SAMPLER_RATE", 1)


def sentry_profiles_sampler(sampling_context):
    # this function is use for config sample rate, modify this function to control sample rate
    # path_info = sampling_context['wsgi_environ']['PATH_INFO']
    # list_exclude = ["/v1/users/me/"]
    return env.int("SENTRY_PROFILE_SAMPLER_RATE", 1)


SENTRY_IGNORE_EXCEPTION_CODE = env.list("SENTRY_IGNORE_EXCEPTION_CODE", default=[2002, 2009, 2018, 8000, 10004, 10004])


def before_send(event, hint):
    """
    EmailRegisteredNotVerifiedException : 2002
    LogInException : 2009
    CandidateCodeIsNotValidException : 2017
    EmailInviteIsNotValidException : 2018
    TokenExpiredException: 8000
    PermissionIsNotValidException : 10004
    PermissionAccessIsNotValidException : 10004
    """
    if "exc_info" in hint:
        if hasattr(hint["exc_info"][1], "code") and hint["exc_info"][1].code in SENTRY_IGNORE_EXCEPTION_CODE:
            return None
        elif (
            hasattr(hint["exc_info"][1], "status_code")
            and hint["exc_info"][1].status_code == status.HTTP_401_UNAUTHORIZED
        ):
            return None

    return event


if "SENTRY_IO_DSN" in os.environ:
    sentry_sdk.init(
        dsn=env.str("SENTRY_IO_DSN"),
        integrations=[DjangoIntegration(), CeleryIntegration()],
        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True,
        traces_sampler=sentry_traces_sampler,
        profiles_sampler=sentry_profiles_sampler,
        before_send=before_send,
    )

DEFAULT_ERROR_MESSAGE = _("An error has occurred")

# LOG STASH
IP_LOGSTASH = os.environ.get("IP_LOGSTASH", default="127.0.0.1")
PORT_LOGSTASH = int(os.environ.get("PORT_LOGSTASH", default=5959))

# NEW FEEDS
USE_REDIS = os.environ.get("USE_REDIS", default="yes")

# web hooks
WEBHOOK_HANDLERS: Dict[str, str] = {}

# cms config
WP_CMS = {
    "WP_CMS_SITE": env.str("WP_CMS_SITE", default="http://127.0.0.1/"),
}

# https://stream-framework.readthedocs.io/en/latest/settings.html#redis-settings
STREAM_REDIS_CONFIG = {
    "default": {
        "host": env.str("REDIS_HOST", default="redis"),
        "port": env.int("REDIS_PORT", default="6379"),
        "db": 0,
        "password": None,
    },
}
SIGNUP_REDIRECT_URL = env.str("SIGNUP_REDIRECT_URL", default="")
BRANCH_IO_CLIENT_KEY = env.str("BRANCH_IO_CLIENT_KEY", default="")
USE_BRANCH_IO = env.bool("USE_BRANCH_IO", default=False)
SLICE_TO_BULK_CREATE_NUMBERS = env.int("SLICE_TO_BULK_CREATE_NUMBERS", default=500)

# Fake email format
FAKE_EMAIL_FORMAT = env.str("FAKE_EMAIL_FORMAT", default="mailfake@goldfish.com")


DEFAULT_CURRENCY = env.str("DEFAULT_CURRENCY", default="USD")

NUMBER_FAKE_DASHBOARD_DATA = env.int("NUMBER_FAKE_DASHBOARD_DATA", default=100000)

MAX_LIMIT_S3_DIRECT_UPLOAD_SIZE_BYTES = env.int("MAX_LIMIT_S3_DIRECT_UPLOAD_SIZE_BYTES", default=2000000000000000)
CHUNK_FILE_SIZE = env.int("CHUNK_FILE_SIZE", default=100)
MIN_LIMIT_S3_DIRECT_UPLOAD_SIZE_BYTES = env.int("MIN_LIMIT_S3_DIRECT_UPLOAD_SIZE_BYTES", default=50)

USE_X_FORWARDED_HOST = env.bool("USE_X_FORWARDED_HOST", default=False)
SECURE_PROXY_SSL_HEADER = env.tuple("SECURE_PROXY_SSL_HEADER", default=None)
DEFAULT_POSITION_CENTRE_POINT = env.list("DEFAULT_POSITION_CENTRE_POINT", default=[-98.5456116, 31.2638905])
# Subscription
FRONTEND_RETURN_SUBSCRIPTION_PAYPAL = env.str(
    "FRONTEND_RETURN_SUBSCRIPTION_PAYPAL", default="?paymentSuccess=true&isSub=true"
)
FRONTEND_CANCEL_SUBSCRIPTION_PAYPAL = env.str(
    "FRONTEND_RETURN_SUBSCRIPTION_PAYPAL", default="?paymentSuccess=false&isSub=false"
)

AWS_S3_REGION_NAME = env.str("AWS_S3_REGION_NAME", default="")
AWS_STORAGE_BUCKET_NAME = env("AWS_STORAGE_BUCKET_NAME", default="")
AWS_MEDIA_URL = env("AWS_MEDIA_URL", default=f"https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com")  # noqa
LAMBDA_EXPORT_MAP_CSV_FUNCTION = env("LAMBDA_EXPORT_MAP_CSV_FUNCTION", default="export_csv")
LAMBDA_IMPORT_CONTACT_STATUS_FUNCTION = env("LAMBDA_IMPORT_CONTACT_STATUS_FUNCTION", default="import_contact_csv")
LAMBDA_EXPORT_DASHBOARD_CONTACT_FUNCTION = env("LAMBDA_EXPORT_DASHBOARD_CONTACT_FUNCTION", default="export_csv")
INTERNAL_BASE_URL = env.str("INTERNAL_BASE_URL", default="")
USE_CACHE_CHART = env.bool("USE_CACHE_CHART", default=False)

S3DIRECT_DESTINATIONS = {
    "s3_admin_upload": {
        # "key" [required] The location to upload file
        #       1. String: folder path to upload to
        #       2. Function: generate folder path + filename using a function
        "key": lambda filename, args: "uploads/files/" + uuid.uuid4().hex + "_" + re.sub(r"[\s\-]+", "_", filename),
        "key_args": "uploads/files",
        # "auth" [optional] Limit to specfic Django users
        #        Function: ACL function
        "auth": lambda u: u.is_staff,
        # "allowed" [optional] Limit to specific mime types
        #           List: list of mime types
        # "allowed": ["image/jpeg", "image/png", "video/mp4"],
        # "bucket" [optional] Bucket if different from AWS_STORAGE_BUCKET_NAME
        #          String: bucket name
        "bucket": "media",
        # "endpoint" [optional] Endpoint if different from AWS_S3_ENDPOINT_URL
        #            String: endpoint URL
        "endpoint": AWS_MEDIA_URL,
        # "region" [optional] Region if different from AWS_S3_REGION_NAME
        #          String: region name
        "region": AWS_S3_REGION_NAME,  # Default is 'AWS_S3_REGION_NAME'
        # "acl" [optional] Custom ACL for object, default is 'public-read'
        #       String: ACL
        "acl": "public-read",
        # "cache_control" [optional] Custom cache control header
        #                 String: header
        "cache_control": "max-age=2592000",
        # "content_disposition" [optional] Custom content disposition header
        #                       String: header
        "content_disposition": lambda x: 'attachment; filename="{}"'.format(x),
        # "content_length_range" [optional] Limit file size
        #                        Tuple: (from, to) in bytes
        "content_length_range": (MIN_LIMIT_S3_DIRECT_UPLOAD_SIZE_BYTES, MAX_LIMIT_S3_DIRECT_UPLOAD_SIZE_BYTES),
        # "server_side_encryption" [optional] Use serverside encryption
        #                          String: encrytion standard
        # "server_side_encryption": "AES256",
        # "allow_existence_optimization" [optional] Checks to see if file already exists,
        #                                returns the URL to the object if so (no upload)
        #                                Boolean: True, False
        "allow_existence_optimization": False,
    }
}
EXPIRED_INVITATION_DAYS = env.int("EXPIRED_INVITATION_DAYS", default=7)
MINUTES_RUN_UPDATE_DASHBOARD_CONTACT_DATA = env.str("MINUTES_RUN_UPDATE_DASHBOARD_CONTACT_DATA", default="*/30")
ACCOUNT_EMAIL_CONFIRMATION_HMAC = env.bool("EMAIL_CONFIRMATION_HMAC", default=False)
CELERYD_TASK_TIME_LIMIT = env.int("CELERYD_TASK_TIME_LIMIT", default=60)
TIME_TO_MARK_FAILED_PROCESSING_TASK = env.int("TIME_TO_MARK_FAILED_PROCESSING_TASK", default=4)
DAYS_TO_REMOVE_SYNC_CONTACT_RECORDS = env.int("DAYS_TO_REMOVE_SYNC_CONTACT_RECORDS", default=30)
STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3.S3Storage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

SEND_UNDER_REVIEW_EMAIL_AFTER_COMPLETED_SIGN_UP = env.bool(
    "SEND_UNDER_REVIEW_EMAIL_AFTER_COMPLETED_SIGN_UP", default=False
)

LAMBDA_PROCESS_FILE_LEAD_FUNCTION_NAME = env("LAMBDA_PROCESS_FILE_LEAD_FUNCTION_NAME", default="")
TTL_SYSTEM_CONFIG_CACHE = env.int("TTL_SYSTEM_CONFIG_CACHE", default=1800)  # second

TEMP_DIRECTORY = env.str("TEMP_DIRECTORY", default="/tmp")
ADMIN_REORDER = (
    # Keep original label and models
    {
        "app": "users",
        "models": (
            "users.User",
            "users.PendingUser",
            "users.ApproveUser",
            "users.Admin",
            "users.RegularUser",
            "users.SalesRepresentative",
            "users.Company",
            "users.ResetPasswordOTP",
            "account.EmailAddress",
            "users.SaleLog",
        ),
    },
    "dashboard",
    "systems",
    "admin",
    "startup",
    "devices",
    "location",
    "core",
    "django_celery_results",
    "notification",
    "fcm_django"
    # # Rename app
    # {'app': 'auth', 'label': 'Authorisation'},
    # Reorder app models
    # # Exclude models
    # {'app': 'auth', 'models': ('auth.User', )},
    #
    # # Cross-linked models
    # {'app': 'auth', 'models': ('auth.User', 'sites.Site')},
    #
    # # models with custom name
    # {'app': 'auth', 'models': (
    #     'auth.Group',
    #     {'model': 'auth.User', 'label': 'Staff'},
    # )},
)
TEMP_DIR = env.str("TEMP_DIR", default="./tmp")
IMPORT_CHUNK_SIZE = env.str("IMPORT_CHUNK_SIZE", default=10000)
LAMBDA_PROCESS_FILE_FUNCTION_NAME = env("LAMBDA_PROCESS_FILE_FUNCTION_NAME", default="")

SALE_STATUS_NEW_LEAD = env.str("SALE_STATUS_NEW_LEAD", default="New Lead")
SALE_STATUS_INTERESTED = env.str("SALE_STATUS_INTERESTED", default="Interested")
SALE_STATUS_NOT_INTERESTED = env.str("SALE_STATUS_NOT_INTERESTED", default="Not Interested")
SALE_STATUS_INSPECTION_SCHEDULED = env.str("SALE_STATUS_INSPECTION_SCHEDULED", default="Inspection Scheduled")
SALE_STATUS_SIGNED_UP = env.str("SALE_STATUS_SIGNED_UP", default="Signed Up")

# Hubspot
HUBSPOT_API_KEY = env("HUBSPOT_API_KEY", default="")
HUBSPOT_CLIENT_SECRET = env("HUBSPOT_CLIENT_SECRET", default="")
